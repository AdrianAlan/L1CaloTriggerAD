-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity normalize_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (19 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (19 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of normalize_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal sext_ln1118_fu_156_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_fu_160_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_fu_160_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_164_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_fu_156_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_fu_172_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_188_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_1_fu_192_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_1_fu_192_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_1_fu_196_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_188_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_1_fu_204_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_220_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_2_fu_224_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_2_fu_224_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_2_fu_228_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_2_fu_220_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_2_fu_236_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_3_fu_252_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_3_fu_256_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_3_fu_256_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_3_fu_260_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_3_fu_252_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_3_fu_268_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_4_fu_284_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_4_fu_288_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_4_fu_288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_4_fu_292_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_4_fu_284_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_4_fu_300_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_316_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_5_fu_320_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_5_fu_320_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_5_fu_324_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_5_fu_316_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_5_fu_332_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_6_fu_348_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_6_fu_352_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_6_fu_352_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_6_fu_356_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_6_fu_348_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_6_fu_364_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_7_fu_380_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_7_fu_384_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_7_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_7_fu_388_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_7_fu_380_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_7_fu_396_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_8_fu_412_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_8_fu_416_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_8_fu_416_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_8_fu_420_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_8_fu_412_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_8_fu_428_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_9_fu_444_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_9_fu_448_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_9_fu_448_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_9_fu_452_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_9_fu_444_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_9_fu_460_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_10_fu_476_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_10_fu_480_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_10_fu_480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_s_fu_484_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_10_fu_476_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_10_fu_492_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_11_fu_508_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_11_fu_512_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_11_fu_512_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_10_fu_516_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_11_fu_508_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_11_fu_524_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_12_fu_540_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_12_fu_544_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_12_fu_544_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_11_fu_548_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_12_fu_540_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_12_fu_556_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_13_fu_572_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_13_fu_576_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_13_fu_576_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_12_fu_580_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_13_fu_572_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_13_fu_588_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_14_fu_604_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_14_fu_608_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln1118_14_fu_608_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1118_13_fu_612_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_14_fu_604_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_14_fu_620_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= sub_ln1118_fu_172_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_10_preg <= sub_ln1118_10_fu_492_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_11_preg <= sub_ln1118_11_fu_524_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_12_preg <= sub_ln1118_12_fu_556_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_13_preg <= sub_ln1118_13_fu_588_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_14_preg <= sub_ln1118_14_fu_620_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= sub_ln1118_1_fu_204_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= sub_ln1118_2_fu_236_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= sub_ln1118_3_fu_268_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_4_preg <= sub_ln1118_4_fu_300_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_5_preg <= sub_ln1118_5_fu_332_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_6_preg <= sub_ln1118_6_fu_364_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_7_preg <= sub_ln1118_7_fu_396_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_8_preg <= sub_ln1118_8_fu_428_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv20_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_9_preg <= sub_ln1118_9_fu_460_p2(21 downto 2);
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_fu_172_p2, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= sub_ln1118_fu_172_p2(21 downto 2);
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_1_fu_204_p2, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= sub_ln1118_1_fu_204_p2(21 downto 2);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_10_fu_492_p2, ap_return_10_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_10 <= sub_ln1118_10_fu_492_p2(21 downto 2);
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_11_fu_524_p2, ap_return_11_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_11 <= sub_ln1118_11_fu_524_p2(21 downto 2);
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_12_fu_556_p2, ap_return_12_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_12 <= sub_ln1118_12_fu_556_p2(21 downto 2);
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_13_fu_588_p2, ap_return_13_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_13 <= sub_ln1118_13_fu_588_p2(21 downto 2);
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_14_fu_620_p2, ap_return_14_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_14 <= sub_ln1118_14_fu_620_p2(21 downto 2);
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_2_fu_236_p2, ap_return_2_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= sub_ln1118_2_fu_236_p2(21 downto 2);
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_3_fu_268_p2, ap_return_3_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= sub_ln1118_3_fu_268_p2(21 downto 2);
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_4_fu_300_p2, ap_return_4_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_4 <= sub_ln1118_4_fu_300_p2(21 downto 2);
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_5_fu_332_p2, ap_return_5_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_5 <= sub_ln1118_5_fu_332_p2(21 downto 2);
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_6_fu_364_p2, ap_return_6_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_6 <= sub_ln1118_6_fu_364_p2(21 downto 2);
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_7_fu_396_p2, ap_return_7_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_7 <= sub_ln1118_7_fu_396_p2(21 downto 2);
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_8_fu_428_p2, ap_return_8_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_8 <= sub_ln1118_8_fu_428_p2(21 downto 2);
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sub_ln1118_9_fu_460_p2, ap_return_9_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_9 <= sub_ln1118_9_fu_460_p2(21 downto 2);
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    sext_ln1118_10_fu_476_p0 <= p_read10;
        sext_ln1118_10_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_10_fu_476_p0),22));

    sext_ln1118_11_fu_508_p0 <= p_read11;
        sext_ln1118_11_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_11_fu_508_p0),22));

    sext_ln1118_12_fu_540_p0 <= p_read12;
        sext_ln1118_12_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_12_fu_540_p0),22));

    sext_ln1118_13_fu_572_p0 <= p_read13;
        sext_ln1118_13_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_13_fu_572_p0),22));

    sext_ln1118_14_fu_604_p0 <= p_read14;
        sext_ln1118_14_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_14_fu_604_p0),22));

    sext_ln1118_1_fu_188_p0 <= p_read1;
        sext_ln1118_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_1_fu_188_p0),22));

    sext_ln1118_2_fu_220_p0 <= p_read2;
        sext_ln1118_2_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_2_fu_220_p0),22));

    sext_ln1118_3_fu_252_p0 <= p_read3;
        sext_ln1118_3_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_3_fu_252_p0),22));

    sext_ln1118_4_fu_284_p0 <= p_read4;
        sext_ln1118_4_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_4_fu_284_p0),22));

    sext_ln1118_5_fu_316_p0 <= p_read5;
        sext_ln1118_5_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_5_fu_316_p0),22));

    sext_ln1118_6_fu_348_p0 <= p_read6;
        sext_ln1118_6_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_6_fu_348_p0),22));

    sext_ln1118_7_fu_380_p0 <= p_read7;
        sext_ln1118_7_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_7_fu_380_p0),22));

    sext_ln1118_8_fu_412_p0 <= p_read8;
        sext_ln1118_8_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_8_fu_412_p0),22));

    sext_ln1118_9_fu_444_p0 <= p_read9;
        sext_ln1118_9_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_9_fu_444_p0),22));

    sext_ln1118_fu_156_p0 <= p_read;
        sext_ln1118_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_fu_156_p0),22));

    shl_ln1118_10_fu_516_p3 <= (trunc_ln1118_11_fu_512_p1 & ap_const_lv10_0);
    shl_ln1118_11_fu_548_p3 <= (trunc_ln1118_12_fu_544_p1 & ap_const_lv10_0);
    shl_ln1118_12_fu_580_p3 <= (trunc_ln1118_13_fu_576_p1 & ap_const_lv10_0);
    shl_ln1118_13_fu_612_p3 <= (trunc_ln1118_14_fu_608_p1 & ap_const_lv10_0);
    shl_ln1118_1_fu_196_p3 <= (trunc_ln1118_1_fu_192_p1 & ap_const_lv10_0);
    shl_ln1118_2_fu_228_p3 <= (trunc_ln1118_2_fu_224_p1 & ap_const_lv10_0);
    shl_ln1118_3_fu_260_p3 <= (trunc_ln1118_3_fu_256_p1 & ap_const_lv10_0);
    shl_ln1118_4_fu_292_p3 <= (trunc_ln1118_4_fu_288_p1 & ap_const_lv10_0);
    shl_ln1118_5_fu_324_p3 <= (trunc_ln1118_5_fu_320_p1 & ap_const_lv10_0);
    shl_ln1118_6_fu_356_p3 <= (trunc_ln1118_6_fu_352_p1 & ap_const_lv10_0);
    shl_ln1118_7_fu_388_p3 <= (trunc_ln1118_7_fu_384_p1 & ap_const_lv10_0);
    shl_ln1118_8_fu_420_p3 <= (trunc_ln1118_8_fu_416_p1 & ap_const_lv10_0);
    shl_ln1118_9_fu_452_p3 <= (trunc_ln1118_9_fu_448_p1 & ap_const_lv10_0);
    shl_ln1118_s_fu_484_p3 <= (trunc_ln1118_10_fu_480_p1 & ap_const_lv10_0);
    shl_ln_fu_164_p3 <= (trunc_ln1118_fu_160_p1 & ap_const_lv10_0);
    sub_ln1118_10_fu_492_p2 <= std_logic_vector(unsigned(shl_ln1118_s_fu_484_p3) - unsigned(sext_ln1118_10_fu_476_p1));
    sub_ln1118_11_fu_524_p2 <= std_logic_vector(unsigned(shl_ln1118_10_fu_516_p3) - unsigned(sext_ln1118_11_fu_508_p1));
    sub_ln1118_12_fu_556_p2 <= std_logic_vector(unsigned(shl_ln1118_11_fu_548_p3) - unsigned(sext_ln1118_12_fu_540_p1));
    sub_ln1118_13_fu_588_p2 <= std_logic_vector(unsigned(shl_ln1118_12_fu_580_p3) - unsigned(sext_ln1118_13_fu_572_p1));
    sub_ln1118_14_fu_620_p2 <= std_logic_vector(unsigned(shl_ln1118_13_fu_612_p3) - unsigned(sext_ln1118_14_fu_604_p1));
    sub_ln1118_1_fu_204_p2 <= std_logic_vector(unsigned(shl_ln1118_1_fu_196_p3) - unsigned(sext_ln1118_1_fu_188_p1));
    sub_ln1118_2_fu_236_p2 <= std_logic_vector(unsigned(shl_ln1118_2_fu_228_p3) - unsigned(sext_ln1118_2_fu_220_p1));
    sub_ln1118_3_fu_268_p2 <= std_logic_vector(unsigned(shl_ln1118_3_fu_260_p3) - unsigned(sext_ln1118_3_fu_252_p1));
    sub_ln1118_4_fu_300_p2 <= std_logic_vector(unsigned(shl_ln1118_4_fu_292_p3) - unsigned(sext_ln1118_4_fu_284_p1));
    sub_ln1118_5_fu_332_p2 <= std_logic_vector(unsigned(shl_ln1118_5_fu_324_p3) - unsigned(sext_ln1118_5_fu_316_p1));
    sub_ln1118_6_fu_364_p2 <= std_logic_vector(unsigned(shl_ln1118_6_fu_356_p3) - unsigned(sext_ln1118_6_fu_348_p1));
    sub_ln1118_7_fu_396_p2 <= std_logic_vector(unsigned(shl_ln1118_7_fu_388_p3) - unsigned(sext_ln1118_7_fu_380_p1));
    sub_ln1118_8_fu_428_p2 <= std_logic_vector(unsigned(shl_ln1118_8_fu_420_p3) - unsigned(sext_ln1118_8_fu_412_p1));
    sub_ln1118_9_fu_460_p2 <= std_logic_vector(unsigned(shl_ln1118_9_fu_452_p3) - unsigned(sext_ln1118_9_fu_444_p1));
    sub_ln1118_fu_172_p2 <= std_logic_vector(unsigned(shl_ln_fu_164_p3) - unsigned(sext_ln1118_fu_156_p1));
    trunc_ln1118_10_fu_480_p0 <= p_read10;
    trunc_ln1118_10_fu_480_p1 <= trunc_ln1118_10_fu_480_p0(12 - 1 downto 0);
    trunc_ln1118_11_fu_512_p0 <= p_read11;
    trunc_ln1118_11_fu_512_p1 <= trunc_ln1118_11_fu_512_p0(12 - 1 downto 0);
    trunc_ln1118_12_fu_544_p0 <= p_read12;
    trunc_ln1118_12_fu_544_p1 <= trunc_ln1118_12_fu_544_p0(12 - 1 downto 0);
    trunc_ln1118_13_fu_576_p0 <= p_read13;
    trunc_ln1118_13_fu_576_p1 <= trunc_ln1118_13_fu_576_p0(12 - 1 downto 0);
    trunc_ln1118_14_fu_608_p0 <= p_read14;
    trunc_ln1118_14_fu_608_p1 <= trunc_ln1118_14_fu_608_p0(12 - 1 downto 0);
    trunc_ln1118_1_fu_192_p0 <= p_read1;
    trunc_ln1118_1_fu_192_p1 <= trunc_ln1118_1_fu_192_p0(12 - 1 downto 0);
    trunc_ln1118_2_fu_224_p0 <= p_read2;
    trunc_ln1118_2_fu_224_p1 <= trunc_ln1118_2_fu_224_p0(12 - 1 downto 0);
    trunc_ln1118_3_fu_256_p0 <= p_read3;
    trunc_ln1118_3_fu_256_p1 <= trunc_ln1118_3_fu_256_p0(12 - 1 downto 0);
    trunc_ln1118_4_fu_288_p0 <= p_read4;
    trunc_ln1118_4_fu_288_p1 <= trunc_ln1118_4_fu_288_p0(12 - 1 downto 0);
    trunc_ln1118_5_fu_320_p0 <= p_read5;
    trunc_ln1118_5_fu_320_p1 <= trunc_ln1118_5_fu_320_p0(12 - 1 downto 0);
    trunc_ln1118_6_fu_352_p0 <= p_read6;
    trunc_ln1118_6_fu_352_p1 <= trunc_ln1118_6_fu_352_p0(12 - 1 downto 0);
    trunc_ln1118_7_fu_384_p0 <= p_read7;
    trunc_ln1118_7_fu_384_p1 <= trunc_ln1118_7_fu_384_p0(12 - 1 downto 0);
    trunc_ln1118_8_fu_416_p0 <= p_read8;
    trunc_ln1118_8_fu_416_p1 <= trunc_ln1118_8_fu_416_p0(12 - 1 downto 0);
    trunc_ln1118_9_fu_448_p0 <= p_read9;
    trunc_ln1118_9_fu_448_p1 <= trunc_ln1118_9_fu_448_p0(12 - 1 downto 0);
    trunc_ln1118_fu_160_p0 <= p_read;
    trunc_ln1118_fu_160_p1 <= trunc_ln1118_fu_160_p0(12 - 1 downto 0);
end behav;
