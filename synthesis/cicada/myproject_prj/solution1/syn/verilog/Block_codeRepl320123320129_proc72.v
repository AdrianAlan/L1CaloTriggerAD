// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_codeRepl320123320129_proc72 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        link_out_0_V_i,
        link_out_0_V_o,
        link_out_0_V_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [4:0] p_read;
input  [4:0] p_read1;
input  [4:0] p_read2;
input  [4:0] p_read3;
input  [4:0] p_read4;
input  [4:0] p_read5;
input  [4:0] p_read6;
input  [4:0] p_read7;
input  [4:0] p_read8;
input  [4:0] p_read9;
input  [4:0] p_read10;
input  [4:0] p_read11;
input  [4:0] p_read12;
input  [4:0] p_read13;
input  [4:0] p_read14;
input  [127:0] link_out_0_V_i;
output  [127:0] link_out_0_V_o;
output   link_out_0_V_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] link_out_0_V_o;
reg link_out_0_V_o_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire    grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start;
wire    grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done;
wire    grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_idle;
wire    grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_ready;
reg    grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start_reg;
reg    ap_block_state1_ignore_call16;
wire    ap_CS_fsm_state2;
wire   [127:0] p_Result_s_fu_191_p5;
reg   [127:0] link_out_0_V_o_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start_reg = 1'b0;
#0 link_out_0_V_o_preg = 128'd0;
end

dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start),
    .ap_done(grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done),
    .ap_idle(grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_idle),
    .ap_ready(grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_ready),
    .data_0_V_read(p_read),
    .data_1_V_read(p_read1),
    .data_2_V_read(p_read2),
    .data_3_V_read(p_read3),
    .data_4_V_read(p_read4),
    .data_5_V_read(p_read5),
    .data_6_V_read(p_read6),
    .data_7_V_read(p_read7),
    .data_8_V_read(p_read8),
    .data_9_V_read(p_read9),
    .data_10_V_read(p_read10),
    .data_11_V_read(p_read11),
    .data_12_V_read(p_read12),
    .data_13_V_read(p_read13),
    .data_14_V_read(p_read14)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start_reg <= 1'b1;
        end else if ((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_ready == 1'b1)) begin
            grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        link_out_0_V_o_preg <= 128'd0;
    end else begin
        if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            link_out_0_V_o_preg <= p_Result_s_fu_191_p5;
        end
    end
end

always @ (*) begin
    if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        link_out_0_V_o = p_Result_s_fu_191_p5;
    end else begin
        link_out_0_V_o = link_out_0_V_o_preg;
    end
end

always @ (*) begin
    if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        link_out_0_V_o_ap_vld = 1'b1;
    end else begin
        link_out_0_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call16 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start = grp_dense_resource_ap_ufixed_ap_fixed_16_5_5_3_0_config6_s_fu_157_ap_start_reg;

assign p_Result_s_fu_191_p5 = {{link_out_0_V_i[127:120]}, {112'd1}, {link_out_0_V_i[7:0]}};

endmodule //Block_codeRepl320123320129_proc72
